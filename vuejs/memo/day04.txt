웹개발4 11일차
Vue.js 4일차

객체 리터럴 -> 콜백 함수 -> 템플릿 리터럴 -> 비동기

1. 객체 리터럴
	객체 속성 작성 시 변수명과 동일하다면 생략이 가능하다
	객체의 속성이 변수명과 동일하면 생략할 수 있는 것을 객체 리터럴 단축 표기법이라 한다
	
	객체 메소드 정의 시 화살표 함수로 정의한다
	

2. 템플릿 리터럴(Template Literal)
   백틱으로 묶여진 문자열에 템플릿 대입문(${})를 이용해 동적으로 끼워넣을 수 있는 방법
   

3. 모듈(Module)
	모듈 : 독립성을 가진 재사용 가능한 코드블록을 의미한다
	export, import 키워드를 사용한다
	ES6 모듈은 파일 자체의 스코프를 만들어서 독자적인 모듈 스코프를 갖는다
	모듈 내에서 var키워드로 선언한 변수는 전역변수도 아니고, window객체의 프로퍼티도 아님


js확장자와 mjs확장자의 차이
	javascript 파일의 확장자는 .js임
	모듈을 다룰때 사용하는 파일 확장자는 .mjsd임
	
- 모듈 지원
	js : Common JS나 AMD같은 이전모듈시스템을 사용
	mjs : ECMAScript 모듈 시스템을 사용

- 스크립트 형식 
	js : 기본적으로 스크립트 형식으로 해석
	mjs : 모듈 형식으로 해석
	
- import/export문 사용
	js : require, module.exports와 같은 commonJS 스타일의 모듈 시스템 사용
	mjs : import/export 문을 사용하여 ECMAScript 모듈을 정의
	
- Node.js 지원
	js : js파일 지원
	mjs : Node.js 13.2부터 지원

=> 모듈을 사용시에는 .mjs 확장자를 사용하는 것이 좋다

2) export 키워드
	독자적인 모듈 스코프를 갖기 때문에 모듈안에 선언한 모든 식별자들은 기본적으로 해당 모듈에서만
	참조가 가능
	모듈안에 선언한 식별자를 외부에 공개하여 다른 모듈이 참조가능하게 하려면
	export 키워드를 사용함
	
	export const p = "Hello";
	
3) import 키워드
	모듈에서 export한 대상을 로드하기 위해서 사용함
	모듈에서 export한 식별자로 import하면 ES6모듈의 파일 확장자는 생략 불가
	
	import 변수, 함수, 클래스명 from './파일명.확장자명'

4. 콜백함수(callback function)
	매개변수로 함수를 전달받아 내부에서 실행하는 함수
	
	함수1 (매개변수1) {
		실행할 문장; 
		매개변수2; 
	}
	함수2 (매개변수2) {
		실행할 문장;
		매개변수2();
	}
	함수3 (매개변수3){
		실행할 문장; 
		매개변수3();
	}


5. 비동기처리
	비동기 처리를 수행할 때 처리가 완료되면 콜백함수가 호출되도록 하는 일반적인 함수 형태
	=> 비동기 처리 시 작업이 순차적으로 반복되면 콜백함수들이 중첩되어 예외처리어렵고
	복잡도 증가하는 문제점이 있다
	ES6에서는 Promise 객체를 지원하여 비동기 처리를 좀 더 깔끔하게(가독성향상)할 수 있다.
	
   const 객체명 = new Promise((resolve, reject) => {
      //비동기 작업 수행
      //내부에서 resolve(result)함수 호출하면 then에 등록해둔 함수가 호출됨
      //reject(error)가 호출되거나 error가 발생하면 catch에 등록된 함수가 호출됨
   })
   객체명.then((result) => {
   })
   .catch((error) => {
   })
   	
1) Promise의 3가지 상태
	new Promise() 프로미스를 생성하고 종료할 때까지 단계
	
	Pending(대기상태) : 비동기 처리 로직이 아직 완료되지 않은 상태
		new Promise() 를 호출하면 대기상태가 된다
		콜백함수로 resolve, reject 를 선언할 수 있다

	Fulfilled(이행상태) : 비동기 처리가 완료되어 프로미스 결과값을 반환해 준 상태
		콜백함수 resolve가 실행되면 Fulfilled상태가 된다
		then()문 실행
	
	Rejected(실패상태) : 비동기 처리가 실패하거나 오류가 발생한 상태
		콜백함수 reject가 실행되면 Rejected 상태가 된다
		catch()문 실행


2) 프로미스 체이닝
   하나의 프로미스 처리 결과를 다른 프로미스와 연결하여 비동기 작업을 순차적으로 처리하는 방법
   중첩된 콜백함수를 피하고 가독성 높은 코드를 작성할 수 잇따

   then() 메소드로 사용하여 구현하며 새로운 프로미스를 반환하기 때문에 
   연속적으로 호출하여 체이닝을 구성할 수 있다
		







	
