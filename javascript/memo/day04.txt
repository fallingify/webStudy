Day04

객체 -> 함수 -> 배열 -> HTML JS

1. 객체
1) Javascript의 객체
	자바스크립트의 원시 타입값을 제외한 모든 값이 객체
	객체는 프로퍼티와 메소드로 구성된다. 
	프로퍼티는 키와 값으로 구성되며 값의 위치에 함수가 올 수 있다
	프로퍼티의 값이 함수인 경우 일반함수와 구분하기 위해 메소드라고 부른다

2) 객체 생성
	클래스가 없어도 다양한 방법으로 객체를 만들 수 있다
	객체 리터럴을 이용한 생성
	객체 리터럴을 {} 을 이용하여 표현한다

	let test = {
		num1 : 10,
		num2 : 20, 
		name : "jh", 
		sum : function(){
			return this.num1 + this.num2;}
	
	};

3) 객체 사용
	객체의 프로퍼티에 접근하는 방법은 2가지 존재한다
	. 을 사용한다. 
		console.log(test.name); 
		console.log(test.sum);
	[]를 사용한다.
	[]를 사용하면 key를 작은 따옴표로 감싸야한다
		console.log(test['name']);


4) 프로퍼티 생성과 삭제
	객체를 생성하고 이후에 객체 내부에 프로퍼티를 생성하거나 삭제하는 게 가능하다
	- 생성
		객체에 존재하지 않는 키에 값을 저장한다
		test.num3 = 2.5;
	
	- 삭제 
		delete를 사용한다
		delete test.num3;

2. 함수
1) 함수
	자바스크립트의 함수는 일급객체이다
	일급객체는 값으로 사용할 수 있는 것을 의미한다
	즉, 함수는 객체타입의 값이며 변수에 저장하거나 매개변수로 전달하거나 반환하는것이 가능
	
2) 일반함수 정의 
	function 함수명(매개변수) {
		실행할 코드
		return 반환값;
	}
	
3) 익명함수 정의
	이름이 없는 함수이며 보통 변수에 저장하여 사용한다.
	let 변수 = function(매개변수){
		실행할 코드
		return 반환값;
	}
	


4) 콜백함수 
	함수의 매개변수로 전달되는 함수를 의미
	모듈화를 시키기위해 원하는 곳에서 실행하기 위해 사용함(재사용성)
	

5) 즉시 실행 함수 
	한번만 사용하는 함수는 즉시 실행함수로 만들어 사용한다
	즉시 실행함수는 만듦과 동시에 실행이 된다
	재사용할 목적이 없으므로 익명함수로 만든다
	
	(function(매개변수){
		코드; 
	})(매개변수로 넘겨줄 값);

6) 화살표 함수
	익명함수를 더 편하게 만들 수 있는 표기법(자바의 람다식비슷)
	() => {}
	

3. 전역객체
1) GlobalThis
	웹브라우저 환경에서는 window
	노드js에서는 global

2) global
	Node.js 환경에서만 사용되는 전역객체
	

4. 배열
	자바스크립트의 배열은 배열처럼 보이고 사용하지만 사실 리스트
	배열이 저장하는 값을 요소
	요소를 저장하는 값은 원시타입 값, 객체도 가능

1) 배열 생성
	let arr = [1,2,3];
	let arr2 = new Array(1, 2, 3);
	
	
2) 배열 사용
	배열명[idx]

3) 다차원 배열
	배열 안의 배열
	다차원 배열 = 행렬

	const matrix = [[1,2,2], [3,1,2]];
	console.log(matrix[0][0]);
	
4) map함수
	배열에 각 요소에 대해서 주어진 콜백함수를 호출하고 각 요소를 새로운배열로 매핑
	원본배열 건드리지않음
	const newArray = array.map(callback(element[ , index[, array]][, thisArg]);
	
	element: 현재 처리중인 요소값
	index : 현재 처리중인 요소인덱스(선택사항)
	array: map() 함수를 호출한 배열(선택사항)
	thisArg : callback함수 내에서 this키워드가 참조할 객체(선택사항)
	

5) filter()
	주어진 콜백함수로 만든 모든 배열 함수를 테스트하고 조건을 충족하고 요소만을 가지고 새로운 배열을 생성
	const newArray = array.filter(callback(element[ , index[, array]][,thisArg]);

	element: 현재 처리중인 요소값
	index : 현재 처리중인 요소인덱스(선택사항)
	array: filter() 함수를 호출한 배열(선택사항)
	thisArg : callback함수 내에서 this키워드가 참조할 객체(선택사항)
	

5. 자바스크립트 엔진구조
	자바스크립트는 싱글쓰레드의 싱글컨커런트언어
	동시에 하나의작업이나 하나의 코드 조각만 실행할 수 있다는 뜻
	하나의 콜 스택을 가짐, 스택은 힙 큐와 함께 v8엔진
	내부에서 실행하는 자바스크립트 동시성 모델 concurrency model 을 구성

콜스택(call stack)
	힙에 저장된 객체의 주소값을 저장
	

힙메모리(heap memory)
	객체는 대부분 구조화되지않은 메모리 영역에 할당된다
	변수와 객체에 대한 모든 메모리 할당은 여기에서 발생한다
	

데이터 저장 순서
   - 원시 데이터 값
      값 : 원시 타입 값 자체는 Call Stack에 저장된다
      변수 : 변수는 값이 저장된 Call Stack의 메모리 주소를 참조한다

   - 참조 데이터 값
      값 : 참조타입(객체, 배열, 함수,,)은 힙 메모리에 저장된다
      Heap Memory 참조값 : 저장된 힙메모리의 주소를 Call Stack에 저장한다
      변수 : 변수는 힙메모리의 주소가 저장된 Call Stack 메모리의 주소를 참조한다

   	함수를 호출할 때 램에 주소값을 저장한다
   	function add(){}

   	저장공간이 만들어진다 => 할당(allocation)
   	변수, 함수를 선언하면 저장공간이 RAM에 할당되면 그 고유한 값인 주소값이 부여된다

	RAM
	======
	OS Kernel Space
	======
	Stack
	------
	Free
	------
	Heap
	------
	BSS
	------
	Data영역
	------
	Text영역
	

	참조값의 데이터 자체는 별도의 메모리 공간에 저장되며
	변수 할당 시 값은 힙에 저장되고 주소값은 스택에 저장됨
	자바스크립트 엔진은 변수가 가지고 있는 메모리 주소를 이용해 변수값에 접근함
	
	가비지컬렉션
	자바스크립트는 값을 메모리에 저장, 변수는 값의 주소를 참조
	변수가 값을 재할당받을때 변수가 참조하는 주소값이 변경됨
	재할당과정에서 더이상 참조되지 않는 값이 생길 수 있고
	자바스크립트의 가비지 컬렉터에 의해 적절한 시점에 자동으로 해지됨
	



















