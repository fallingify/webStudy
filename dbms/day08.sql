-- WEB이 붙은 모든 테이블 삭제
DROP TABLE WEB_BOOK;
DROP TABLE WEB_CASE;
DROP TABLE WEB_STU_INFO;


-- 직원 테이블 생성
CREATE TABLE WEB_EMPLOYEES( 
	EMP_EMPLOYEEID NUMBER PRIMARY KEY,
	EMP_NAME VARCHAR2(100),
	EMP_BIRTHDATE DATE,
	EMP_DEPARTMENTINFO VARCHAR2(1000),
	EMP_SALARY NUMBER
);


-- 데이터 삽입
INSERT INTO WEB_EMPLOYEES
VALUES (1, '스티븐', TO_DATE('2010-12-31', 'YYYY-MM-DD'), '영업부, 서울시, 01234', 300);

INSERT INTO WEB_EMPLOYEES
VALUES(2, '마리아', TO_DATE('2003-09-14', 'YYYY-MM-DD'), '사업부, 경기도, 02345', 400);


INSERT INTO WEB_EMPLOYEES
VALUES(3, '안나', TO_DATE('2011-10-15', 'YYYY-MM-DD'), '영업부, 서울시, 01234', 250);

SELECT * FROM WEB_EMPLOYEES;

-- 1차 정규화
CREATE TABLE web_employee(
	emp_empID NUMBER PRIMARY KEY,
	emp_name varchar2(50),
	emp_birthdate DATE,
	dep_departmentid NUMBER,
	dep_address varchar2(100),
	dep_postalcode varchar2(100),
	emp_salary number
	);

SELECT * FROM web_employee;

-- 데이터 삽입
INSERT INTO WEB_EMPLOYEE 
VALUES(1, '스티븐', TO_DATE('2010-12-31', 'YYYY-MM-DD'), 1, '서울시', '01234', 500);

INSERT INTO WEB_EMPLOYEE
VALUES(2, '안나', TO_DATE('2011-04-15', 'YYYY-MM-DD'), 2, '경기도', '02345', 300);

INSERT INTO WEB_EMPLOYEE
VALUES(3, '줄리아', TO_DATE('2003-08-14', 'YYYY-MM-DD'), 3, '서울시', '01234', 280);

-- 2차 정규화
-- 부서테이블 생성
CREATE TABLE WEB_DEPARTMENTS( 
	DEP_DEPARTMENTID NUMBER PRIMARY KEY,
	DEP_NAME VARCHAR2(100),
	DEP_ADDRESS VARCHAR2(1000),
	DEP_POSTALCODE VARCHAR2(1000)
);

SELECT * FROM WEB_DEPARTMENTS;

-- 직원 테이블 수정(2차 정규화 적용)
ALTER TABLE web_employee
ADD DEP_DEPART_ID NUMBER REFERENCES WEB_DEPARTMENTS(DEP_DEPARTMENTID);

SELECT * FROM web_employee;

DELETE FROM WEB_EMPLOYEE;

-- 직원 테이블
-- DEP_DEPARTEMENTID, DEP_ADDRESS, DEP_POSTALCODE 컬럼 삭제
ALTER TABLE WEB_EMPLOYEE
DROP COLUMN DEP_ADDRESS, DEP_POSTALCODE;


DROP TABLE WEB_EMPLOYEE;

CREATE TABLE WEB_EMPLOYEE(
	emp_emp_id NUMBER PRIMARY KEY,
	emp_name VARCHAR2(100),
	emp_birthdate DATE,
	emp_salary NUMBER,
	dep_departmentid NUMBER REFERENCES WEB_DEPARTMENTS(DEP_DEPARTMENTID)
);


-- 직원테이블 2명 직원 추가
-- 영업부, 개발부
INSERT INTO WEB_EMPLOYEE
VALUES(1, '스티븐', TO_DATE('1990-01-05', 'YYYY-MM-DD'), 200, NULL);

INSERT INTO WEB_EMPLOYEE
VALUES(2, '안나', TO_DATE('2004-06-17', 'YYYY-MM-DD'), 230, NULL);

-- 부서 테이블 3개의 부서 추가
-- 영업부, 개발부, 사업부
INSERT INTO WEB_DEPARTMENTS
VALUES(3, '사업부', '안산시', '03456');


UPDATE WEB_EMPLOYEE
SET DEP_DEPARTMENTID = 2
WHERE EMP_EMP_ID = 2;

-- 3차 정규화(기본키 아닌 컬럼이 다른 컬럼을 결정하는 경우)
-- 주소 정보(주소, 우편번호)
-- 부서의 주소 정보를 별도의 테이블로 추출

-- 부서 주소 테이블 생성
CREATE TABLE WEB_DEPADDRESS ( 
	ADD_ID NUMBER PRIMARY KEY,
	ADD_ADDRESS VARCHAR2(100),
	ADD_POSTALCODE VARCHAR2(100)
);


-- 부서 테이블 수정(3차 정규화 적용)
ALTER TABLE WEB_DEPARTMENTS
ADD ADD_ID NUMBER REFERENCES WEB_DEPADDRESS(ADD_ID);

-- DEP_ADDRESS, DEP_POSTALCODE 삭제
ALTER TABLE WEB_DEPARTMENTS
DROP COLUMN DEP_POSTALCODE;

-- WEB_DEPADDRESS 데이터 추가
-- 1 서울시 01234
-- 2 부산시 03456
-- 3 경기도 02345
INSERT INTO WEB_DEPADDRESS
VALUES (3, '경기도', '02345');


SELECT * FROM WEB_EMPLOYEE;
SELECT * FROM WEB_DEPARTMENTS;
SELECT * FROM WEB_DEPADDRESS;

UPDATE WEB_DEPARTMENTS
SET ADD_ID = 3
WHERE DEP_DEPARTMENTID = 3;


SELECT * FROM WEB_EMPLOYEE;

UPDATE WEB_EMPLOYEE
SET EMP_NAME = '홍길동'
WHERE EMP_EMP_ID = 1;

UPDATE WEB_EMPLOYEE
SET EMP_NAME = '김영선'
WHERE EMP_EMP_ID = 2;

SELECT * FROM WEB_EMPLOYEE;

INSERT INTO WEB_EMPLOYEE
VALUES(3, '안나', TO_DATE('1900-12-01', 'YYYY-MM-DD'), 300, NULL);

INSERT INTO WEB_EMPLOYEE
VALUES(4, '스티븐', TO_DATE('1900-12-01', 'YYYY-MM-DD'), 300, NULL);
-- 디비버 상단에 T모양 아이콘을 누르면 오토 커밋으로, 매뉴얼 커밋으로 변경 가능
-- 매뉴얼 커밋으로 변경하면 T우측에 auto -> None 
-- 하나씩 명령어를 실행하면 숫자가 1씩 올라간다
-- 우리가 실행시키는 명령어들을 하나의 트랜잭션으로 묶어주며 이 트랜잭션이 몇개의 명령어를 실행시켰는지 알려주는 숫자이다
-- 롤백을 누르면 현재 트랜잭션의 모든 명령어를 취소시킨다(None으로 변경)
-- None으로 바뀌면 그때부터는 rollback으로 돌아갈 수 업ㅄ다
-- 커밋을 누르는 순간 Rollback으로 돌아갈 수 없다

-- 집계함수
CREATE TABLE WEB_STUDENT( 
	STU_ID NUMBER PRIMARY KEY,
	STU_NAME VARCHAR2(50),
	STU_SCORE1 NUMBER, -- JAVA 점수
	STU_SCORE2 NUMBER, -- DBMS 점수
	STU_SUBJECT VARCHAR2(100)
);

INSERT INTO WEB_STUDENT
VALUES(1, '김영선', 90, 95, 'IT');

INSERT INTO WEB_STUDENT
VALUES(2, '김', 100, 53, 'IT');

INSERT INTO WEB_STUDENT
VALUES(3, '이', 90, 59, '컴공');

INSERT INTO WEB_STUDENT
VALUES(4, '박', 30, 25, 'IT');

INSERT INTO WEB_STUDENT
VALUES(5, '안', 77, 50, '컴공');

INSERT INTO WEB_STUDENT
VALUES(6, '서', NULL, NULL, '컴공');

SELECT * FROM WEB_STUDENT;

-- COUNT(*) : NULL 값 포함한 행의 개수
SELECT COUNT(*) FROM WEB_STUDENT;

-- COUNT(컬럼명) : NULL 값 제외한 행의 개수
SELECT COUNT(STU_NAME) FROM WEB_STUDENT;
SELECT COUNT(STU_SCORE1) FROM WEB_STUDENT;

-- SUM([DISTINCT|ALL] 표현) : NULL을 제외한 행의 합계
SELECT SUM(STU_SCORE1) FROM WEB_STUDENT; -- 387

-- AVG([DISTINCT|ALL) : NULL을 제외한 행의 평균
SELECT AVG(STU_SCORE1) FROM WEB_STUDENT;  --77.4

-- MAX([DISTINCT | ALL] 표현식) : 최대값
SELECT MAX(STU_SCORE1) FROM WEB_STUDENT;
SELECT MIN(STU_SCORE1) FROM WEB_STUDENT;

-- WEB_STUDENT 테이블에서 NULL을 포함시켜서 COUNT
SELECT COUNT(NVL(STU_SCORE1, 0)) FROM WEB_STUDENT;

-- GROUP BY, HAVING 절

CREATE TABLE WEB_ORDERS( 
	ORD_ORDERID NUMBER PRIMARY KEY,
	ORD_CUSTOMERID NUMBER,
	ORD_DATE DATE,
	ORD_TOTALAMOUNT NUMBER
);



INSERT INTO WEB_ORDERS
VALUES(7, 107, TO_DATE('2023-12-26', 'YYYY-MM-DD'), 120);

INSERT INTO WEB_ORDERS
VALUES(8, 101, TO_DATE('2023-12-26', 'YYYY-MM-DD'), 250);

INSERT INTO WEB_ORDERS
VALUES(9, 101, TO_DATE('2023-12-26', 'YYYY-MM-DD'), 270);

SELECT * FROM WEB_ORDERS;

-- ORD_CUTOMERID가 종류 검색
SELECT DISTINCT "ORD_CUSTOMERID" FROM WEB_ORDERS;

-- 고객별 주문 합계를 구하고 주문 금액합계가 300 이상인 고객을 찾는 쿼리
SELECT ORD_CUSTOMERID, SUM(ORD_TOTALAMOUNT)  -- 4 조회
FROM WEB_ORDERS -- 1 WEB_ORDERS 테이블에서
GROUP BY ORD_CUSTOMERID -- 2 ORD_CUSTOMERID 그룹 묶기
HAVING SUM(ORD_TOTALAMOUNT) >= 300; -- 3 HAVING ORD_TOTALAMOUNT >= 300

-- 날짜별 주문건수를 구하고 주문건수가 2건 이상인 날짜를 찾는 쿼리
SELECT ORD_DATE, COUNT(*)
FROM WEB_ORDERS
GROUP BY ORD_DATE
HAVING COUNT(*) >= 2;

-- 고객별 주문합계를 구하고, 주문 금액 합계 200 이상이면서 주문건수가 2건 이상인 고객을 찾는 쿼리
SELECT  ORD_CUSTOMERID, SUM(ORD_TOTALAMOUNT), COUNT(*)
FROM WEB_ORDERS
GROUP BY ORD_CUSTOMERID
HAVING SUM(ORD_TOTALAMOUNT) >= 200 AND COUNT(*) >= 2;

-- 고객들의 평균 금액 구하기
SELECT * FROM WEB_ORDERS;

SELECT AVG(ORD_TOTALAMOUNT)
FROM WEB_ORDERS
GROUP BY ORD_CUSTOMERID;

-- EMPLOYEES 테이블에서 JOB_ID별 평균 SALARY가 10000미만인 JOB_ID검색
-- JOB_ID는 알파벳 순으로 정렬(오름차순)
SELECT * FROM EMPLOYEES;

SELECT JOB_ID, AVG(SALARY)
FROM EMPLOYEES
GROUP BY JOB_ID
HAVING AVG(SALARY) < 10000
ORDER BY JOB_ID;

-- EMPLOYEES 테이블에서
-- 1. 핸드폰 번호가 515로 시작하는 사원들의 JOB_ID별 평균을 구한다
-- 조회 컬럼 부서, 평균 급여로 표시한다
-- 평균 급여가 높은 순으로 정렬한다

SELECT job_id 부서, AVG(SALARY) "평균 급여"
FROM EMPLOYEES
WHERE PHONE_NUMBER LIKE '515%'
GROUP BY JOB_ID
ORDER BY "평균 급여" DESC;

-- 2. COMMISSION_PCT 별 평균 급여를 조회한다
-- COMMISSION_PCT를 오름차순으로 정렬하며
-- HAVING 절을 사용하여 NULL은 제외한다

SELECT COMMISSION_PCT, AVG(SALARY)
FROM EMPLOYEES
GROUP BY COMMISSION_PCT
HAVING COMMISSION_PCT IS NOT NULL
ORDER BY COMMISSION_PCT;











