day05
복습 -> 제약조건 -> 무결성 -> 모델링

-------------------------------------------------------------------------------------
0. 복습
제약조건
1) PK(Primary Key)
	고유한 값이며 각 행의 구분점으로 사용된다
	중복이 없고, Null값을 허용하지 않는다
		
2) FK(Foreign Key)
	다른 테이블의 PK를 사용하며 중복이 가능하다
	보통 테이블끼리 관계를 맺을 때 사용한다(참조 무결성)
	Null값을 허용한다

3) UK(Unique)
	해당 컬럼에서 중복값이 없는 고유값으로 사용해야한다
	Null 값을 허용한다

4) CK(Check)
	컬럼의 값이 특정 조건을 만족해야한다(값의 범위나 조건 사용)

5) NOT NULL
	해당 컬럼의 값은 Null값이 허용되지 않는다

6) DEFAULT
	해당 컬럼의 값이 입력되지 않을 경우, 기본값으로 자동 입력된다
	지정하지않을경우 Null로 자동 사용된다

DDL(Data Definition Langauge) : 데이터 정의어
	테이블 조작, 제어 관련 쿼리문
1) CREATE
	테이블 생성
	CREATE TABLE 테이블명( 
		컬럼명 자료형(용량) [제약조건], ..
	);

데이터베이스 명명 규칙
	- 이름은 중복 불가
	- 문자로 시작해야한다
	- 특수문자는 _, $, # 사용가능
	- 예약어 사용 불가
	- 공백 사용불가
	- 최대 30글자까지 가능

제약조건 정의방법
	- 컬럼 레벨 정의 : 하나의 컬럼을 정의하면서 같이 정의
	- 테이블 레벨 정의 : CREATE 쿼리 마지막에 정의
	- NOT NULL  제약조건은 컬럼 레벨 정의만 가능
	- 테이블명_컬럼명_제약조건명 또는 시스템 구분_테이블명_제약조건명

2) ALTER
	테이블 수정(컬럼, 제약조건, 테이블명 등)
- 테이블명 수정
	ALTER TABLE 테이블명 RENAME TO 새로운 테이블명;
- 컬럼 추가
	ALTER TABLE 테이블명 ADD(새로운 컬럼명 자료형(용량));
- 컬럼명 변경
	ALTER TABLE 테이블명 RENAME COLUMN 기존컬럼명 TO 새로운컬럼명;
- 컬럼 삭제
	ALTER TABLE 테이블명 DROP COLUMN 컬럼명;
- 컬럼 타입 수정
	ALTER TABLE 테이블명 MODIFY(컬럼명 자료형(용량));
- 제약조건 추가
	ADD CONSTRAINT 제약조건의 이름 제약조건(컬럼명);
- 제약조건 삭제
	DROP CONSTRAINT 제약조건의 이름;

- NOT NULL, DEFAULT 제약조건은 MODIFY를 통해 컬럼을 수정하면서 변경한다
- 이름을 붙여서 생성한 제약조건은 수정시 삭제 후 다시 추가한다

3) DROP
	테이블 삭제
	DROP TABLE 테이블명;

4) TRUNCATE
	테이블 데이터 전체 삭제(테이블이 아닌 데이터 삭제)
	TRUNCATE TABLE 테이블명;

- TRUNCATE와 DELETE의 차이
	DELETE : 테이블의 모든 데이터 삭제, 테이블의 용량은 감소하지 않음, rollback 가능, where 사용 가능
	TRUNCATE : 테이블의 모든 데이터 삭제, 테이블의 용량 초기화, rollback 불가능, where 사용 불가능

2. 무결성
	무결성 : 데이터에 결함이 없다
	데이터의 정확성, 일관성, 유효성이 유지되는 것

무결성을 판단하는 3가지
	정확성 : 데이터는 애매하지 않아야한다
	일관성 : 각 사용자 일관된 데이터를 볼 수 있도록 해야한다
	유효성 : 데이터가 실제 존재하는 데이터여야 한다
 
무결성의 3가지 종류
- 개체 무결성
	모든 테이블이 PK로 선택된 컬럼을 가져야한다

- 참조 무결성
	두 테이블의 데이터가 항상 일관된 값을 갖도록 유지해야한다

- 도메인 무결성
	컬럼의 타입, NULL값의 허용 등에 대한 사항을 정의하고 올바른 데이터가 입력되어있는지를 확인하는것이다

3. 모델링(기획)
1) 요구사항 분석
	회원, 주문, 상품 : 3가지를 관리하고자한다

2) 개념적 설계(개념 모델링)
	회원		주문		상품
	아이디		주문번호		상품번호
	비밀번호		주문날짜		상품명
	이름		아이디		가격
	주소		상품번호		재고량
	핸드폰번호
	이메일
	생일

3) 논리적 설계(논리 모델링)
	회원		주문		상품
	아이디 PK	주문번호 PK	상품번호 PK
	비밀번호		주문날짜		상품명
	이름		아이디	FK	가격
	주소		상품번호	FK	재고량
	핸드폰번호
	이메일 UK
	생일

4) 물리적 설계(물리 모델링)
	물리적 설계는 보면 바로 만들 수 있도록 작성한다
	TYPE, 테이블명, 컬럼명등을 실제 사용할 이름으로 작성한다

	TBL_USER
	USER_ID : VARCHAR2(1000) : PRIMARY KEY
	--------------------------------------------------
	USER_PASSWORD : VARCHAR2(1000)
	USER_NAME : VARCHAR2(1000)
	USER_ADDRESS : VARCHAR2(1000)
	USER_EMAIL : VARCHAR2(1000) : UNIQUE
	USER_BIRTH : DATE

5) 구현
	물리적 설계를 보면서 코드를 작성한다

-------------------------------------------------------------------------------------------------------
1. 핸드폰과 핸드폰 케이스를 판매한다
- 핸드폰을 구매하면 핸드폰 케이스도 같이 구매한다
- 핸드폰  : 제품번호, 색상, 사이즈, 가격, 제조일, 할인률
- 케이스  : 제품번호, 색상, 가격
- 핸드폰은 특정 케이스만 같이 구입할 수 있다

	상위 테이블 : 케이스 부모일경우
		케이스의 PK를 핸드폰이 FK로 갖게된다
		1종류의 핸드폰은 1종류의 케이스만 낄 수 있다

	상위 테이블 : 핸드폰일 경우
		핸드폰의 PK를 케이스의 FK로 갖게된다
		1종류의 핸드폰은 여러 케이스를 낄 수 있다

2. 개념적 설계
	핸드폰		케이스
	제품번호		제품번호
	색상		색상
	사이즈		가격
	가격
	제조일
	할인률

3. 논리적 설계
	핸드폰		케이스
	제품번호	PK	제품번호 PK
	색상		색상
	사이즈		가격
	가격		핸드폰제품번호 FK
	제조일
	할인률

4. 물리적 설계
	TBL_PHONE
	PHONE_SERIAL_NUMBER : VARCHAR2(1000) : PK
	--------------------------------------------------------
	PHONE_COLOR : VARCHAR2(1000)
	PHONE_SIZE : NUMBER
	PHONE_PRICE : NUMBER
	PHONE_DATE : DATE
	PHONE_SALE : NUMBER

	TBL_CASE
	CASE_SERIAR_NUMBER : VARCHAR2(1000) : PK
	-------------------------------------------------------
	CASE_COLOR : VARCHAR2(1000)
	CASE_PRICE : NUMBER
	PHONE_SERIAL_NUMBER : VARCHAR2(1000) : FK

5. 구현

----------------------------------------------------------------------------------------------------------------
1. 요구사항 분석
	도서관에서 회원의 정보와 책의 정보가 필요하다
	회원 정보 : 회원번호, 이름, 나이, 핸드폰번호, 주소
	책의 정보 : 도서번호, 책이름, 장르

	단, 장르 인문학, IT, 추리, 경영만 있다
	한명의 회원은 여러권을 책을 대여할 수 있다
	테이블 명 : WEB_MEMBER, WEB_BOOK

- 제약조건 : PRIMARY KEY, FOREIGN KEY, UNIQUE, NOT NULL, CHECK

2. 개념적 설계

3. 논리적 설계

4. 물리적 설계

5. 구현














































